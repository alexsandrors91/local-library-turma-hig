# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [10.x, 12.x, 14.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test --if-present
  
  
  test:
    name: test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        # Make sure the actual branch is checked out when running on pull requests
        ref: ${{ github.head_ref }}

    - name: Prettify code
      uses: creyD/prettier_action@v3.1
      with:
        # This part is also where you can pass other options, for example:
        prettier_options: --write **/*.{js,md}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  
  linter:
    name: Lint code base
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          # Full git history is needed to get a proper list of changed files within `super-linter`
          fetch-depth: 0
      # Run Linter against code base #
      - name: Lint Code Base
        uses: github/super-linter@v3
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_CSS: true
          VALIDATE_MARKDOWN: true
          JAVASCRIPT_DEFAULT_STYLE: test
  
  
  deploy-hom:
    runs-on: ubuntu-latest
    env:
      DB_URI: $${{ secrets.DB_URI }}
      NODE_ENV: production
      
    needs: [build, test]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          # Full git history is needed to build on Heroku
          fetch-depth: 0
      
      - name: Login Heroku
        uses: akhileshns/heroku-deploy@v3.10.9 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: alexsandrors91-local-library
          heroku_email: alexsandrors91@gmail.com
          justlogin: true
      
      - name: Set Heroku remote
        run: heroku git:remote -a alexsandrors91-local-library
      
      - name: Set env variables
        run: |
          heroku config:set NODE_ENV=${{ env.NODE_ENV }}
          heroku config:set MONGODB_URI=${{ env.DB_URI }}
      
      - name: Push code to Heroku
        run: git push heroku main
    deploy-to-production:
      runs-on: ubuntu-latest
      needs: deploy-to-hom
      environment:
        name: 'production'
        url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

      steps:
        - name: Download artifact from build job
          uses: actions/download-artifact@v2
          with:
            name: node-app

        - name: 'Deploy to Azure Web App'
            id: deploy-to-webapp
            uses: azure/webapps-deploy@v2
            with:
              app-name: 'aula-cd-alexsanddrors91'
              publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_478A31C4FB9040B795B037BAA5CEDBF1 }}
              package: .

  
  
